options
{
  LOOKAHEAD=3;
}
PARSER_BEGIN(ScalrParser)
import java.io.*;

public class ScalrParser {
    public static void main(String[] args) {
		BufferedReader br = null;
        String text = "";
        try {
			br = new BufferedReader(new FileReader(args[0]));
            String line = "";
            while ((line = br.readLine()) != null) {
                text += line + "\n";

            }
            new ScalrParser(new java.io.StringReader(text)).function();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}
PARSER_END(ScalrParser)

SKIP : { " " | "\t" }
TOKEN: {
    "==" | ">" | "<" | "<=" | ">=" |
    "and" | "or" | "not" | "->" | "." | "\n" | 
    "," | "+" | "-" | "%" | "(" | ")" | "[" | "]" |
	"note" | "pitch" | "volume" | 
       	"duration" | "quarter" | "half" | "whole" |
	"end" | "func" | "while" | "foreach" |
	 "in" |	"if" | "else" | "track" |
	<LETTER: ["A"-"Z"] | ["a"-"z"]> |
	<INT: "0" | ["1"-"9"](["0"-"9"])*> |
	<ID: <LETTER>(<LETTER> | <INT> | "_")*> |
    <DEGREE: ["A"-"G"]("b" | "s")?(["0"-"9"] | "1""0")> |
    <DUR: "1""/"("2" | "4" | "8" | "16" | "32")>
	}

void fscalr(): {} { function() (fscalr2())* }

void fscalr2(): {} { ("\n")+ function() }

void function(): {} { "func" <ID> "("(parameters())?")" (block())? ret() "\n" "end" }

void parameters(): {} { <ID> (parameters1())* }

void parameters1(): {} { "," parameters() }

void block(): {} { line() (block1())* }

void block1(): {} { "\n" line() }

void line(): {} {
loop() 
| conditional() 
| assignment() 
| "\n"
}

void loop(): {} {
"while" "(" booleanExpr() ")" block() "end" 
| "foreach" "(" <ID> "in" ret() ")" block() "end"
}

void booleanExpr(): {} {bE1() (booleanExpr1())*}

void booleanExpr1(): {} {
"and" bE1()
| "or" bE1()
}

void bE1(): {} {
"not" booleanExpr()
| operand() "==" operand()
| operand() ">" operand()
| operand() "<" operand() 
| operand() "<=" operand() 
| operand() ">=" operand()
}

void conditional(): {} {"if" "(" booleanExpr() ")" block() "end" "\n" (els3())?}

void els3(): {} {
"else" conditional() 
| "else" block() "end"
}

void assignment(): {} {
<ID> "=" expression() 
| <ID> "+=" expression() 
| <ID> "*=" expression() 
| <ID> "/=" expression() 
| <ID> "%=" expression()
}

void expression(): {} {expr1() (expr0())*}

void expr0(): {} {
"+" expr1()
| "-" expr1()
}

void expr1(): {} { expr3() (expr2())* }

void expr2(): {} {
"*" expr3()
| "/" expr3()
}

void expr3(): {} {expr5() (expr4())*}

void expr4(): {} {"%" expr5()}

void expr5(): {} {
"(" expression() ")" 
| operand()
}

void operand(): {} {
<ID> 
| <INT> 
| note() 
| sequence()
}

void note(): {Token n;} {
"note" (note1())+ //{System.out.println("note is created here");}
| sequence() "[" n=<INT> "]" //{System.out.println("note is #" + n + " in a sequence");}
| n=<ID> //{System.out.println("note \"" + n + "\" is an ID");}
}

void note1(): {} {
"." "pitch" "(" [expression() "+" expr5() | "-" expr5() | <DEGREE> | note()] ")" //{System.out.println("pitch is set");}
| "." "volume" "(" [expression() | "+" expr5() | "-" expr5()] ")"
| "." "duration" "(" [expression() | "+" expr5() | "-" expr5() | <DUR>] ")"
| "." ["quarter" | "half" | "whole"]
}


void ret(): {} {sequence()}

void sequence(): {Token s;} {
"[" note() (sequence1())* "]" //{System.out.println("Sequence is created here");}
| s=<ID> //{System.out.println("Sequence \"" + s + "\" corresponds to an ID");}
}

void sequence1(): {} {"," ("\n")* note()}

void track(): {} {"track" "->" ret()}