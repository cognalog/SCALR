options
{
  LOOKAHEAD=3;
}
PARSER_BEGIN(ScalrParser)
import java.io.*;

public class ScalrParser {
    public static void main(String[] args) {
    	FileReader fis;
		BufferedReader br;
		String line;
        try {
			br = new BufferedReader(new FileReader(args[0]));
            String text = "";
            while ((line = br.readLine()) != null) {
                text += line + "\n";
            }
            new ScalrParser(new java.io.StringReader(text)).function();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}
PARSER_END(ScalrParser)

SKIP : { " " | "\t" }
TOKEN: {
    "==" | ">" | "<" | "<=" | ">=" |
    "and" | "or" | "not" | "->" | "." | "\n" | 
    "," | "+" | "-" | "%" | "(" | ")" | "[" | "]" |
	"note" | "pitch" | "volume" | 
       	"duration" | "end" | "func" |
	"while" | "foreach" | "in" |
	"if" | "else" | "track" |
	<LETTER: ["A"-"Z"] | ["a"-"z"]> |
	<INT: "0" | ["1"-"9"](["0"-"9"])+> |
	<ID: <LETTER>(<LETTER> | <INT>)*> |
    <DEGREE: ["A"-"G"]("b" | "s")?(["0"-"9"] | "1""0")>
	}

void function(): {} {"func" <ID> "(" parameters() ")" "\n "block() "\n" ret() "\n" "end"}

void parameters(): {} {<ID> parameters1()
| ""}

void parameters1(): {} {"," parameters() 
| ""}

void block(): {} {line() block1()}

void block1(): {} {"\n" line() block1()
| ""}

void line(): {} {loop() 
| conditional() 
| assignment() 
| "\n" 
| ""}

void loop(): {} {"while" "(" booleanExpr() ")" block() "end" 
| "foreach" "(" <ID> "in" ret() ")" block() "end"}

void booleanExpr(): {} {bE1() booleanExpr1()}

void booleanExpr1(): {} {"and" bE1() booleanExpr1()
| "or" bE1() booleanExpr1()
| ""}

void bE1(): {} {"not" booleanExpr()
| operand() "==" operand()
| operand() ">" operand()
| operand() "<" operand() 
| operand() "<=" operand() 
| operand() ">=" operand()}

void conditional(): {} {"if" "(" booleanExpr() ")" block() "end" "\n" conditional1()}

void conditional1(): {} {"else" conditional() 
| "else" block() "end" 
| ""}

void assignment(): {} {<ID> "=" expression() 
| <ID> "+=" expression() 
| <ID> "*=" expression() 
| <ID> "/=" expression() 
| <ID> "%=" expression()}

void expression(): {} {expr1() expr0()}

void expr0(): {} { "+" expr1() expr0()
| "-" expr1() expr0()
| ""}

void expr1(): {} {"*" expr2() expr1()
| "/" expr2() expr1() 
| ""}

void expr2(): {} {"%" expr3() expr2()
| ""}

void expr3(): {} {"(" expression() ")" 
| operand()} 

void operand(): {} {<ID> 
| <INT> 
| note() 
| sequence()}

void note(): {} {"note" note1() note()}

void note1(): {} {"." "pitch" "(" expression() ")" note1()
| "." "pitch" "(" <DEGREE> ")" note1()
| "." "pitch" "(" "+" expression() ")" note1()
| "." "pitch" "(" "-" expression() ")" note1()
| "." "pitch" "(" expression() ")" note1()
| "." "volume" "(" expression() ")" note1()
| "." "volume" "(" "+" expression() ")" note1()
| "." "volume" "(" "-" expression() ")" note1()
| "." "duration" "(" expression() ")" note1()
| "." "duration" "(" "+" expression() ")" note1()
| "." "duration" "(" "-" expression() ")"note1()
| ""}

void ret(): {} {<ID>
| sequence()}

void sequence(): {} {"[" noteList() "]"}

void noteList(): {} {note() noteList1()}

void noteList1(): {} {"," noteList() 
| ""}

void track(): {} {"track" "->" ret()}