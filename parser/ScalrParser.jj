options
{
  LOOKAHEAD=3;
}
PARSER_BEGIN(ScalrParser)
import java.io.*;

public class ScalrParser {
    public static void main(String[] args) {
		BufferedReader br = null;
        String text = "";
        try {
			br = new BufferedReader(new FileReader(args[0]));
            String line = "";
            while ((line = br.readLine()) != null) {
                text += line + "\n";

            }
            new ScalrParser(new java.io.StringReader(text)).fscalr();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}
PARSER_END(ScalrParser)

SKIP : { " " | "\t" | <"/*" (~[])* "*/"> | "\n" }
TOKEN: {
    "==" | ">" | "<" | "<=" | ">=" |
    "and" | "or" | "not" | "->" | "." | /*"\n" | */
    "," | "+" | "-" | "%" | "(" | ")" | "[" | "]" |
	"note" | "pitch" | "volume" | 
       	"duration" | "quarter" | "half" | "whole" |
	"end" | "func" | "while" | "foreach" |
	 "in" |	"if" | "else" | "import" | "track" |
	<ASSIGN: "=" | "+=" | "-=" | "*=" | "/=" | "%="> |
	<RELN: "==" | "<" | ">" | "<=" | ">="> |
	<LETTER: ["A"-"Z"] | ["a"-"z"]> |
	<INT: "0" | ["1"-"9"](["0"-"9"])*> |
	<ID: <LETTER>(<LETTER> | <INT> | "_")*> |
    <DEGREE: ["A"-"G"]("b" | "s")?(["0"-"9"] | "1""0")> |
    <DUR: "1""/"("2" | "4" | "8" | "16" | "32")>
	}

//void tscalr(): {} { imports()/* ("\n")+*/ function() ("\n")+ (track)+ }

void fscalr(): {} { function() (fscalr2())* }

void fscalr2(): {} { /*("\n")+*/ function() }

void function(): {System.out.println("trying to match function:");} {
"func" <ID> "(" (parameters())? ")" (/*("\n")+*/ block())? /*("\n")+*/ sequence() /*("\n")+*/ "end" {System.out.println("function matched");}
}

void parameters(): {System.out.println("trying to match parameters:");} { 
<ID> (parameters1())* {System.out.println("Parameters matched");}
}

void parameters1(): {} { "," parameters() }

void block(): {System.out.println("trying to match block:");} { 
(line())+ {System.out.println("block matched");}
}

void line(): {System.out.println("trying to match line:");} {
loop() {System.out.println("loop line matched");}
| conditional() {System.out.println("conditional line matched");}
| assignment() {System.out.println("assignment line matched");}
//| "\n" {System.out.println("newline line matched");}
}

void loop(): {System.out.println("trying to match loop:");} {
"while" "(" booleanExpr() ")" block() "end" 
| "foreach" "(" <ID> "in" sequence() ")" block() "end"
}

void booleanExpr(): {} {bE1() (booleanExpr1())*}

void booleanExpr1(): {} {
"and" bE1()
| "or" bE1()
}

void bE1(): {Token op;} {
"not" booleanExpr()
| operand() op=<RELN> operand() {System.out.println(op + " comparison matched");}
}

void conditional (): {System.out.println("trying to match conditional:");} {
"if" "(" booleanExpr() ")" block() "end" /*"\n"*/ (els3())?
}

void els3(): {} {
"else" conditional() 
| "else" block() "end"
}

void assignment(): {Token op; System.out.println("trying to match assignment:");} {
<ID> op=<ASSIGN> expression() {System.out.println(op + " assignment matched");}
}

void expression(): {} {expr1() (expr0())*}

void expr0(): {} {
"+" expr1()
| "-" expr1()
}

void expr1(): {} { expr3() (expr2())* }

void expr2(): {} {
"*" expr3()
| "/" expr3()
}

void expr3(): {} {expr5() (expr4())*}

void expr4(): {} {"%" expr5()}

void expr5(): {} {
"(" expression() ")" 
| operand()
}

void operand(): {} {
<ID> 
| <INT> 
| note() 
| sequence()
}

void note(): {Token n; System.out.println("Trying to match note");} {
"note" (note1())+ {System.out.println("note is created here");}
| sequence() "[" n=<INT> "]" {System.out.println("note is #" + n + " in a sequence");}
| n=<ID> {System.out.println("note \"" + n + "\" is an ID");}
}

void note1(): {} {
"." "pitch" "(" [expression() "+" expr5() | "-" expr5() | <DEGREE> | note()] ")" //{System.out.println("pitch is set");}
| "." "volume" "(" [expression() | "+" expr5() | "-" expr5()] ")"
| "." "duration" "(" [expression() | "+" expr5() | "-" expr5() | <DUR>] ")"
| "." ["quarter" | "half" | "whole"]
}

void sequence(): {Token s; System.out.println("trying to match sequence");} {
"[" (note() (sequence1())*)? "]" {System.out.println("Sequence is created here");}
| s=<ID> {System.out.println("Sequence \"" + s + "\" corresponds to an ID");}
}

void sequence1(): {} {"," /*("\n")**/ note()}

void track(): {} {"track" "->" sequence()}