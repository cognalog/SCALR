options
{
	STATIC = false;
	USER_CHAR_STREAM = true;
}

PARSER_BEGIN(ScalrParser)
package parser;

import scalr.Degree;
import scalr.variable.*;
import scalr.expression.*;
import scalr.Exceptions.*;

import java.io.*;

import java.util.*;
import java.util.regex.Pattern;

public class ScalrParser {
	public static File tscalrFile;
	public static int nestingLevel;
	public static String currentFunc;
	public static HashSet<String> nestingWords = new HashSet<String>();
	static
	{
		nestingWords.add("while");
		nestingWords.add("foreach");
		nestingWords.add("if");
		nestingWords.add("func");
	}
	
	public static void main(String[] args) throws Exception {
		Scanner in = null;
		try {
			if (args.length == 0) {
				System.out.println("Usage: java -jar ScalrParser.jar <tscalr>");
				System.exit(0);
			}
			tscalrFile = new File(args[0]);
			in = new Scanner(tscalrFile);
			String text = "";
			while (in.hasNextLine())
				text += in.nextLine() + "\n";
			text += "\n";
			ScalrParser parser = new ScalrParser(new BackupCharStream(new StringReader(text)));
//			Function mainFunc = new Function("main");
//			SymbolTable.addFunc(mainFunc);
//			SymbolTable.currentSymbolTable = mainFunc.symbolTable;
			parser.tscalr();
//			mainFunc.addStatement(parser.statement());
//			for(Expression e: mainFunc.statements)
//				System.out.println(e.getValue());
			in.close();
		} catch (Throwable e) {
			// Catching Throwable is ugly but JavaCC throws Error objects!
			System.out.println("Syntax check failed: ");
			e.printStackTrace();
			if (in != null)
				in.close();
		}
	}
}
PARSER_END(ScalrParser)

TOKEN_MGR_DECLS : {
	// Required by SetState
	void backup(int n) { input_stream.backup(n); }
}

SKIP : { " " | "\t" | <"//" (~["\n"])* "\n"> | "\r" | "\n" }
TOKEN: {
	"volume" | "duration" | "end" | "func" | "main" | "while" | "foreach" |
	"track" | "in" | "if" | "else" | "note" | "pitch" | "length" |
	"break" | "rest" | "cancel" | "return" | "import" | "print" |
	"->" | "." | "," | "(" | ")" | "[" | "]" | "{" | "}" | "::" |
	<CREATE: "="> |
	<ASSIGN: "+=" | "-=" | "*=" | "/=" | "%="> |
	<NRELN: "<" | ">" | ">=" | "<="> |
	<AND: "and"> |
	<OR: "or"> |
	<NOT: "not"> |
	<URELN: "==" | "!="> |
	<POST: "--" | "++"> |
	<PLUS: "+"> |
	<MINUS: "-"> |
	<DIV: "/"> |
	<MULMOD: "*" | "%"> |
	<LENGTH: "whole" | "half" | "quarter" | "eighth" | "sixteenth" | "thirtysec" |
		"wholeT" | "halfT" | "quarterT" | "eighthT" | "sixteenthT" | "thirtysecT"> |
	<BOOL: "true" | "false"> |
	<DEGREE: ["A"-"G"]("b" | "s")?(["0"-"9"] | "10")> |
	<INT: (("0")+ | ("0")* ["1"-"9"] (["0"-"9"])*)> |
	<ID: (["a"-"z"] | "_" | ["A" - "Z"]) (["A"-"Z"] | ["a"-"z"] | <INT> | "_")*>
}

//When a /* is seen in the DEFAULT state, skip it and switch to the IN_COMMENT state
MORE : { "/*": IN_COMMENT }
//When any other character is seen in the IN_COMMENT state, skip it.
<IN_COMMENT> MORE : { <~[]> }
//When a */ is seen in the IN_COMMENT state, skip it and switch back to the DEFAULT state
<IN_COMMENT> SKIP : { "*/": DEFAULT }
// Import Lexical States
<IN_IMPORT> MORE : { <~[]> }
<IN_IMPORT> TOKEN : { <IMPEND: "import" | "main">: DEFAULT }

void tscalr(): {
	Expression stmt;
} {
	(importExpr())*

	("main" {
		HashMap<String, Expression> mainTable = new HashMap<String, Expression>();
		SymbolTable.currentSymbolTable = mainTable;
	}
		(stmt = statement() { if (stmt != null) stmt.getValue(); })+
	"end" { System.out.println("Below are the tracks:"); })?

	(trackExpr())+
}

void importExpr(): {
	File fscalrFile;
	Token tok;
} {
	"import" {
        SetState(IN_IMPORT);
        tok = getNextToken();
        String name = tok.image;
        if (name.endsWith("main")) {
        	token_source.backup(4);
        	name = name.substring(0, name.length() - 4);
        }
        else if (name.endsWith("import")) {
        	token_source.backup(6);
        	name = name.substring(0, name.length() - 6);
        }
        // Remove all whitespace
        name = name.replaceAll("\\s", "");
        System.out.println(name);
		// The name starts with a "/" or "\", so it is an absolute path
		if (name.startsWith("\\") || name.startsWith("/")) {
			// This file has an extension, so don't include .fscalr
			if (Pattern.matches("^.*\\.\\w+$", name))
				fscalrFile = new File(name);
			else
				fscalrFile = new File(name + ".fscalr");
		}
		// Otherwise, it's a relative path
		else {
			if (Pattern.matches("^.*\\.\\w+$", name))
				fscalrFile = new File(tscalrFile.getParent(), name);
			else
				fscalrFile = new File(tscalrFile.getParent(), name + ".fscalr");
		}
		// Read in the file
		try {
			Scanner in = new Scanner(fscalrFile);
			String text = "";
			while (in.hasNextLine())
				text += in.nextLine() + "\n";
			// Print out the file
			System.out.println("**************");
			System.out.println(text);
			System.out.println("**************");
			ScalrParser fscalrParser = new ScalrParser(new BackupCharStream(new StringReader(text)));
			fscalrParser.fscalr();
		} catch (Exception e) {
			System.err.println("Syntax check failed: ");
			e.printStackTrace();
			System.exit(1);
		}
	}
}

void fscalr(): {
	boolean endOfFile;
} {
	(
		try {
			funcDef()
		} catch (EmptyFunctionBodyError e) {
			SymbolTable.functionReferences.remove(currentFunc);
			System.err.println(e);
		} catch (ParseException e) {
			SymbolTable.functionReferences.remove(currentFunc);
			System.err.println(e);
		} catch (FunctionExistsError e) {
			System.err.println(e);
			if (returnToNestingLevel(0))
				return;
		}
	)+
}

JAVACODE
boolean returnToNestingLevel(int level)
{
	// Our job is to return to the nesting level indicated by level. First, we should check to see if we're
	// already at or above that level
	if (level < nestingLevel) {
		Token currTok = null;
		// Get the next token, incrementing when appropriate, and decrementing when we see an "end"
		do {
			String prevImage = null;
			if (currTok != null)
				prevImage = currTok.image;
			currTok = getNextToken();
			// A special check for if
			if (currTok.image.equals("if") && prevImage != null && prevImage.equals("else")) {}
			else if (nestingWords.contains(currTok.image))
				nestingLevel++;
			else if (currTok.image.equals("end"))
				nestingLevel--;
			// Check to see if we've reached our level
			if (nestingLevel == level)
				return false;
		} while (currTok.kind != EOF);
		return true;
	}
	return false;
}

void trackExpr(): {
	Sequence superSequence = new Sequence();
} {
	"track" "->" "[" trackSeq(superSequence) ("," trackSeq(superSequence))* "]" {
		System.out.print(superSequence);
	}
}

void trackSeq(Sequence superSequence): {
	Expression seq;
} {
	seq = boolExpr() { superSequence.addSequence((Sequence) seq.getValue()); }
}

void funcDef() throws EmptyFunctionBodyError, FunctionExistsError: {
	Function func = null;
	Token funcName;
	Token param;
	Token retName;
	Expression stmt;
} {
	"func" { nestingLevel++; } funcName = <ID> {
		currentFunc = funcName.image;
		func = new Function(funcName.image);
		SymbolTable.addFunc(func);
	} "(" (param = <ID> { func.addParameter(param.image); }
		("," param = <ID> { func.addParameter(param.image); })*)? ")"
			(LOOKAHEAD(2)
				stmt = statement() { func.addStatement(stmt); }
			)*
			(stmt = atom() { func.addStatement(stmt); })?
	"end" {
		nestingLevel--;
		if (func.statements.size() == 0)
			throw new EmptyFunctionBodyError(func.toString());
	}
}

Expression statement(): {
	Expression expr;
} {
	expr = idExpr() { return expr; }
	| expr = whileExpr() { return expr; }
	| expr = foreachExpr() { return expr; }
	| expr = ifElseExpr() { return expr; }
	| expr = controlExpr() { return expr; }
	| expr = printExpr() { return expr; }
}

Expression printExpr(): {
	Expression tok;
} {
	"print" "(" tok = boolExpr() ")" { return new PrintStatement(tok); }
}

Expression controlExpr(): {
	Expression expr;
} {
	"cancel" { return new ControlOperation("cancel"); }
	| "return" { ControlOperation co = new ControlOperation("return"); }
		(expr = boolExpr() { co.addReturn(expr); }) { return co; }
}

Expression ifElseExpr(): {
	IfElseStatement ifElse;
	Expression cond;
	Expression stmt;
} {
	"if" { nestingLevel++; } "(" cond = boolExpr() { ifElse = new IfElseStatement(cond); } ")"
		(stmt = statement() { ifElse.addStatement(stmt); })*
	(
		LOOKAHEAD({ getToken(2).kind == IFTOK })
		"else" <IFTOK: "if"> "(" cond = boolExpr() { ifElse.addElIf(cond); } ")"
			(stmt = statement() { ifElse.addStatement(stmt); })*
	)*
	(
		"else" { ifElse.addEl(); }
			(stmt = statement() { ifElse.addStatement(stmt); })*
	)?
	"end" { nestingLevel--; return ifElse; }
}

Expression foreachExpr(): {
	ForEachStatement forLoop;
	Token noteName;
	Token seqName;
	Expression stmt;
} {
	"foreach" { nestingLevel++; } "(" noteName = <ID> {
		forLoop = new ForEachStatement(noteName.image);
	} ")" "in" seqName = <ID> {
		VariableReference seq = new VariableReference(seqName.image);
		forLoop.addSequence(seq);
	}
		(stmt = statement() { forLoop.addStatement(stmt); })+
	"end" {	nestingLevel--; return forLoop;	}
}

Expression whileExpr(): {
	WhileStatement whileLoop;
	Expression cond;
	Expression stmt;
} {
	"while" { nestingLevel++; } "(" cond = boolExpr() { whileLoop = new WhileStatement(cond); } ")"
		(stmt = statement() { whileLoop.addStatement(stmt);	})+
	"end" { nestingLevel--; return whileLoop; }
}

Expression idExpr(): {
	Token name;
	Token assignOp;
	Token postOp;
	Expression expr;
} {
	name = <ID> (
		<CREATE> expr = boolExpr() {
			CreationOperator co = new CreationOperator(name.image);
			co.addOperand(expr);
			return co;
		}
		| assignOp = <ASSIGN> expr = boolExpr() {
			AssignmentOperator ao = new AssignmentOperator(assignOp.image);
			ao.addOperand(expr);
			ao.setVar(name.image);
			return ao;
		}
		| "." { expr = new VariableReference(name.image); }
			expr = noteOps(expr) ("." expr = noteOps(expr))* {
				return expr;
		}
		| postOp = <POST> {
			expr = new VariableReference(name.image);
			UnaryOperator uo = new UnaryOperator(postOp.image);
			uo.addOperand(expr);
			uo.addVar(name.image);
			return uo;
		}
	)
}

Expression funcCall(String name): {
	Token funcArg;
	Expression arg;
	ArrayList<Expression> arguments = new ArrayList<Expression>();
	FunctionReference fr = new FunctionReference(name);
} {
	"(" (arg = boolExpr() { arguments.add(arg); }
		("," arg = boolExpr() { arguments.add(arg); })*)? ")" {
			fr.addValues(arguments.toArray(new Expression[arguments.size()]));
			return fr;
	}
}

// Boolean and Math grammar taken from: http://compilers.iecc.com/crenshaw/tutor6.txt

Expression boolExpr(): {
	Expression e1;
	Expression e2;
} {
	e1 = boolTerm() (<OR> e2 = boolTerm() {
		BooleanOperator bo = new BooleanOperator("or");
		bo.addOperand(e1);
		bo.addOperand(e2);
		e1 = bo;
	})* {
		return e1;
	}
}

Expression boolTerm(): {
	Expression e1;
	Expression e2;
} {
	e1 = notFactor() (<AND> e2 = notFactor() {
		BooleanOperator bo = new BooleanOperator("and");
		bo.addOperand(e1);
		bo.addOperand(e2);
		e1 = bo;
	})* {
		return e1;
	}
}

Expression notFactor(): {
	Expression e1;
	Token not = null;
} {
	(not = <NOT>)? e1 = boolFactor() {
		if (not != null) {
			BooleanOperator bo = new BooleanOperator("not");
			bo.addOperand(e1);
			return bo;
		}
		return e1;
	}
}

Expression boolFactor(): {
	Expression e1;
	Token bool;
} {
	bool = <BOOL> { return new ScalrBoolean(Boolean.parseBoolean(bool.image)); }
	| e1 = lowRelTerm() { return e1; }
}

Expression lowRelTerm(): {
	Expression e1;
	Expression e2;
	Token rel;
} {
	e1 = highRelTerm() (rel = <URELN> e2 = highRelTerm() {
		BooleanOperator bo = new BooleanOperator(rel.image);
		bo.addOperand(e1);
		bo.addOperand(e2);
		e1 = bo;
	})* {
		return e1;
	}
}

Expression highRelTerm(): {
	Expression e1;
	Expression e2;
	Token rel;
} {
	e1 = arithExpr() (rel = <NRELN> e2 = arithExpr() {
		BooleanOperator bo = new BooleanOperator(rel.image);
		bo.addOperand(e1);
		bo.addOperand(e2);
		e1 = bo;
	})* {
		return e1;
	}
}

Expression arithExpr(): {
	Expression e1;
	Expression e2;
	Token op;
} {
	e1 = term() ((op = <PLUS> | op = <MINUS>) e2 = term() {
		BinaryOperator bo = new BinaryOperator(op.image);
		bo.addOperand(e1);
		bo.addOperand(e2);
		e1 = bo;
	})* {
		return e1;
	}
}

Expression term(): {
	Expression e1;
	Expression e2;
	Token op;
} {
	e1 = signedFactor() ((op = <MULMOD> | op = <DIV>) e2 = signedFactor() {
		BinaryOperator bo = new BinaryOperator(op.image);
		bo.addOperand(e1);
		bo.addOperand(e2);
		e1 = bo;
	})* {
		return e1;
	}
}

Expression signedFactor(): {
	Expression e1;
	Token op = null;
} {
	(op = <MINUS>)? e1 = factor() {
		if (op != null) {
			UnaryOperator uo = new UnaryOperator(op.image);
			uo.addOperand(e1);
			return uo;
		}
		return e1;
	}
}

Expression factor(): {
	Expression e1;
} {
	e1 = atom() { return e1; }
	| "(" e1 = boolExpr() ")" { return e1; }
}

Expression atom(): {
	Token num;
	Expression e;
} {
	num = <INT> { return new ScalrNum(Integer.parseInt(num.image)); }
	| e = newNote() { return e; }
	| e = sequence() { return e; }
	| e = scale() { return e; }
	| e = atomID() { return e; }
}

Expression atomID(): {
	Expression e;
	Token op;
	Token id;
} {
	id = <ID> { e = new VariableReference(id.image); }
	(
		op = <POST> {
			UnaryOperator uo = new UnaryOperator(op.image);
			uo.addOperand(e);
			uo.addVar(id.image);
			e = uo;
		}
		| ("." e = noteOps(e))+
		| e = funcCall(id.image)
	)? { return e; }
}

Expression scale(): {
	Scale scale = new Scale();
	Token deg;
} {
	"{" (deg = <DEGREE> { scale.addDegreeToEnd(Degree.valueOf(deg.image)); })+ "}" {
		return scale;
	}
}

Expression sequence(): {
	Sequence s = new Sequence();
	Expression note;
} {
	"[" (
			(note = newNote() | note = noteID()) { s.addNoteToEnd(note); }
			("," (note = newNote() | note = noteID()) { s.addNoteToEnd(note); })*
		)?
	"]" {
		return s;
	}
}

Expression noteID(): {
	Expression n;
	Token name;
} {
	name = <ID> { n = new VariableReference(name.image); }
	("." n = noteOps(n))* { return n; }
}

Expression newNote(): {
	Expression e = Note.note();
} {
	"note" ("." e = noteOps(e))* { return e; }
	| "break" { e = Note.getBreak(); } ("." e = noteOps(e)) * { return e; }
}

Expression noteOps(Expression n): {}
{
	"pitch" "(" n = pitch(n) ")" { return n; }
	| "volume" "(" n = volume(n) ")" { return n; }
	| "length" "(" n = length(n) ")" { return n; }
	| n = lenTok(n) { return n; }
}

Expression pitch(Expression n): {
	NoteOps no = new NoteOps("pit");
	Token mod = null;
	Token deg;
	Token scale;
	Expression modNum;
} {
	deg = <DEGREE> {
		no.addOperand(n);
		no.addPitch(deg.image);
		return no;
	}
	| LOOKAHEAD({ getToken(2).kind != OPBR })
	(mod = <PLUS>)? modNum = boolExpr() {
		no.addOperand(n);
		no.addNum(modNum);
		if (mod != null)
			no.addMod(mod.image);
		return no;
	}
	| scale = <ID> <OPBR: "["> modNum = boolExpr() "]" {
		no.addOperand(n);
		no.addIndex(modNum);
		no.addScale(new VariableReference(scale.image));
		return no;
	}
	| "rest" {
		no.addOperand(n);
		no.addPitch("br");
		return no;
	}
}

Expression volume(Expression n): {
	Expression num;
	Token mod = null;
} {
	(mod = <PLUS>)? num = boolExpr() {
		NoteOps no = new NoteOps("vol");
		no.addOperand(n);
		no.addNum(num);
		if(mod != null)
			no.addMod(mod.image);
		return no;
	}
}

Expression length(Expression n): {
	NoteOps no = new NoteOps("len");
	Expression num;
	Token mod = null;
	Token numer, denom = null;
} {
	(mod = <PLUS>)? num = boolExpr() {
		no.addOperand(n);
		no.addNum(num);
		if (mod != null)
			no.addMod(mod.image);
		return no;
	}
	| "\"" numer = <INT> (<DIV> denom = <INT>)? "\"" {
		no.addOperand(n);
		if (denom != null)
			no.addLength(numer.image + "/" + denom.image);
		else
			no.addLength(numer.image);
		return no;
	}
}

Expression lenTok(Expression n): {
	Token len;
} {
	len = <LENGTH> {
		NoteOps no = new NoteOps("len");
		no.addOperand(n);
		no.addLength(len.image);
		return no;
	}
}

JAVACODE
//JavaCC hack for doing lexical state transitions syntactically
private void SetState(int state) {
	if (state != token_source.curLexState) {
		Token root = new Token(), last=root;
		root.next = null;

		// First, we build a list of tokens to push back, in backwards order
		while (token.next != null) {
			Token t = token;
			// Find the token whose token.next is the last in the chain
			while (t.next != null && t.next.next != null)
				t = t.next;

			// put it at the end of the new chain
			last.next = t.next;
			last = t.next;

			// If there are special tokens, these go before the regular tokens,
			// so we want to push them back onto the input stream in the order
			// we find them along the specialToken chain.

			if (t.next.specialToken != null) {
				Token tt=t.next.specialToken;
				while (tt != null) {
					last.next = tt;
					last = tt;
					tt.next = null;
					tt = tt.specialToken;
				}
			}
			t.next = null;
		};

		while (root.next != null) {
			token_source.backup(root.next.image.length());
			root.next = root.next.next;
		}
		jj_ntk = -1;
		token_source.SwitchTo(state);
	}
}
