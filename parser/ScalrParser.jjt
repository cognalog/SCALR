options
{
  LOOKAHEAD=3;
}
PARSER_BEGIN(ScalrParser)
package parser;
import java.io.*;
import scalr.*;

public class ScalrParser {
    public static void main(String[] args) {
		BufferedReader br = null;
        String text = "";
        try {
			br = new BufferedReader(new FileReader(args[0]));
            String line = "";
            while ((line = br.readLine()) != null) {
                text += line + "\n";

            }
        ScalrParser parser = new ScalrParser(new java.io.StringReader(text));
        SimpleNode root = parser.note();
        root.dump("");
        new BackendMain(root);
	    System.out.println("grats, your program compiled alright");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}
PARSER_END(ScalrParser)

SKIP : { " " | "\t" | <"/*" (~[])* "*/"> | "\n"}
TOKEN: {
       "and" | "or" | "not" | "->" | "." | /*"\n" |*/
        "," | "\"" | "+" | "-" | "%" | "(" | ")" | "[" | "]" |
	"note" | "pitch" | "volume" | 
       	"duration" | "quarter" | "half" | "whole" |
	"end" | "func" | "main" | "while" | "foreach" |
	 "in" |	"if" | "else" | "import" | "track" | ".fscalr" |
	<ASSIGN: "=" | "+=" | "-=" | "*=" | "/=" | "%="> |
	<RELN: "==" | "<" | ">" | ">=" "<="> |
	<INT: "0" | ["1"-"9"](["0"-"9"])*> |
	<ID: ["a"-"z"](["A"-"Z"] | ["a"-"z"] | <INT> | "_")*> |
    	<DEGREE: ["A"-"G"]("b" | "s")?(["0"-"9"] | "1""0")>
	}

SimpleNode scalr(): {} {
tscalr() {return jjtThis;}
| fscalr() {return jjtThis;} }

void tscalr(): {} { (imp())+ tfunc() (track())+ }

void imp(): {} { "import" "\"" fscalrFile() }

void tfunc(): {} { "func" "main()" block() }

void fscalrFile(): {} { id() ".fscalr" }

void fscalr(): {} { function() (fscalr2())* <EOF> }

void fscalr2(): {} { /*("\n")+*/ function() }

void function(): {} {
"func" id() "(" (parameters())? ")" fblock() {System.out.println("function matched");}
}

void parameters(): {System.out.println("trying to match parameters:");} { 
operand() (parameters1())* {System.out.println("Parameters matched");}
}

void parameters1(): {} { "," parameters() }

void fblock(): {System.out.println("matching function block:");} {
(line())* sequence() "end" {System.out.println("fblock matched");}
}

void block(): {System.out.println("matching block:");} { 
(line())+ "end" {System.out.println("block matched");}
}

void line(): {System.out.println("matching line:");} {
loop() {System.out.println("loop line matched");}
| conditional() {System.out.println("conditional line matched");}
| assignment() {System.out.println("assignment line matched");}
}

void loop(): {System.out.println("matching loop");} {
"while" "(" booleanExpr() ")" block()
| "foreach" "(" id() "in" sequence() ")" block()
}

void booleanExpr(): {System.out.println("matching bool expr:");} {
bE1() (booleanExpr1())*
}

void booleanExpr1(): {} {
"and" bE1()
| "or" bE1()
}

void bE1(): {System.out.println("matching bE1:");} {
"not" booleanExpr()
| "(" booleanExpr() ")"
| expression() reln() expression() {System.out.println("comparison matched");}
}

void conditional (): {System.out.println("matching conditional:");} {
"if" "(" booleanExpr() ")" (line())+ els3()
| "if" "(" booleanExpr() ")" block()
}

void els3(): {System.out.println("matching else");} {
"else" conditional() 
| "else" block()
}

void assignment(): {System.out.println("matching assignment:");} {
id() assign() expression() {System.out.println("assignment matched");}
}

void expression(): {System.out.println("matching expr");} {
expr1() (expr0())*
| {System.out.println("expression error");}
}

void expr0(): {} {
"+" expr1() { jjtThis.value = "+"; }
| "-" expr1() { jjtThis.value = "-"; }
}

void expr1(): {} { expr3() (expr2())* }

void expr2(): {} {
"*" expr3() { jjtThis.value = "*"; }
| "/" expr3() { jjtThis.value = "/"; }
}

void expr3(): {} {expr5() (expr4())*}

void expr4(): {} {
	"%" expr5() { jjtThis.value = "%"; }
}

void expr5(): {} {
"(" expression() ")" 
| operand()
}

void operand(): {System.out.println("matching operand:");} {
funcall()
| id() {System.out.println("operand is id ");}
| note() {System.out.println("operand is note");}
| sequence() {System.out.println("operand is sequence");}
| num() {System.out.println("operand is int");}
}

void funcall(): {} { id() "(" (parameters())? ")" }

SimpleNode note(): {System.out.println("matching note");} {
"note" note0() {System.out.println("note is created here");}
| sequence() "[" expression() "]" {System.out.println("note is nth in a sequence");}
| id() {System.out.println("note is an ID");}
}

void note0(): {} {
note1() note0()
| {}
}

void note1(): {} {
"." "pitch" "(" ( degree() | "+" expr5() | "-" expr5() | note() | expression()) ")"
| "." "volume" "(" ("+" expr5() | "-" expr5() | expression()) ")"
| "." "duration" "(" ("+" expr5() | "-" expr5() | expression()) ")"
| "." ("quarter" | "half" | "whole")
}

void sequence(): {System.out.println("matching sequence:");} {
"[" (note() (sequence1())*)? "]" {System.out.println("Sequence is created here");}
| id() {System.out.println("Sequence corresponds to an ID");}
}

void sequence1(): {} {"," /*("\n")**/ note()}

void track(): {} {
"track" "->" sequence()
}

void id():
{Token t;}
{
t=<ID> {jjtThis.value = t.image;}
}

void num():
{Token t;}
{
t=<INT> {jjtThis.value = t.image;}
}

void degree():
{Token t;}
{
t=<DEGREE> {jjtThis.value = t.image;}
}

void assign():
{Token t;}
{
t=<ASSIGN> {jjtThis.value = t.image;}
}

void reln():
{Token t;}
{
t=<RELN> {jjtThis.value = t.image;}
}