options
{
  LOOKAHEAD=3;
}

PARSER_BEGIN(ScalrParser2)
package parser;
import java.io.*;
import scalr.variable.*;
import scalr.Exceptions.*;

public class ScalrParser2 {
    public static void main(String[] args) throws TypeError {
		BufferedReader br = null;
        String text = "";
        try {
			br = new BufferedReader(new FileReader(args[0]));
            String line = "";
            while ((line = br.readLine()) != null) {
                text += line + "\n";

            }
        ScalrParser2 parser = new ScalrParser2(new java.io.StringReader(text));
        parser.assignment();
        System.out.println(SymbolTable.reference);
	    System.out.println("grats, your program compiled alright");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}
PARSER_END(ScalrParser2)

SKIP : { " " | "\t" | <"/*" (~[])* "*/"> | "\n"}
TOKEN: {
       "and" | "or" | "not" | "->" | "." | /*"\n" |*/
        "," | "\"" | "+" | "-" | "%" | "(" | ")" | "[" | "]" |
	"note" | "pitch" | "volume" | 
       	"duration" | "quarter" | "half" | "whole" |
	"end" | "func" | "main" | "while" | "foreach" |
	 "in" |	"if" | "else" | "import" | "track" | ".fscalr" |
	<ASSIGN: "=" | "+=" | "-=" | "*=" | "/=" | "%="> |
	<RELN: "==" | "<" | ">" | ">=" "<="> |
	<INT: "0" | ["1"-"9"](["0"-"9"])*> |
	<ID: ["a"-"z"](["A"-"Z"] | ["a"-"z"] | <INT> | "_")*> |
    	<DEGREE: ["A"-"G"]("b" | "s")?(["0"-"9"] | "1""0")>
	}
	
void assignment(): {
	String t1;
	Token t2;
} {
	t1=id() <ASSIGN> expression(){
		try {
			SymbolTable.addFunc("blah");
			ScalrNum n = new ScalrNum(Integer.parseInt(t2.image));
			SymbolTable.addReference("blah", t1, n);
			ScalrNum temp = (ScalrNum) SymbolTable.getMember("blah", t1);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
String id():
{Token t;}
{
t=<ID> {return t.image;}
}

BinaryOperator expression(): {System.out.println("matching expr");} {
expr1() (expr0())*
}

void expr0(): {} {
"+" expr1() { jjtThis.value = "+"; }
| "-" expr1() { jjtThis.value = "-"; }
}

void expr1(): {} { expr3() (expr2())* }

void expr2(): {} {
"*" expr3() { jjtThis.value = "*"; }
| "/" expr3() { jjtThis.value = "/"; }
}

void expr3(): {} {expr5() (expr4())*}

void expr4(): {} {
	"%" expr5() { jjtThis.value = "%"; }
}

void expr5(): {} {
"(" expression() ")" 
| operand()
}

void operand(): {System.out.println("matching operand:");} {
funcall()
| id() {System.out.println("operand is id ");}
| note() {System.out.println("operand is note");}
| sequence() {System.out.println("operand is sequence");}
| num() {System.out.println("operand is int");}
}








