/* Generated By:JavaCC: Do not edit this line. ScalrParser.java */
import java.io.*;

public class ScalrParser implements ScalrParserConstants {
    public static void main(String[] args) {
        FileReader fis;
                BufferedReader br;
                String line;
        try {
                        br = new BufferedReader(new FileReader(args[0]));
            String text = "";
            while ((line = br.readLine()) != null) {
                text += line + "\u005cn";
            }
            new ScalrParser(new java.io.StringReader(text)).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }

  static final public void parameters() throws ParseException {
    jj_consume_token(ID);
    parameters1();
  }

  static final public void parameters1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      parameters();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void block() throws ParseException {
    line();
    block1();
  }

  static final public void block1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      jj_consume_token(13);
      line();
      block1();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
    case 30:
      loop();
      break;
    case 32:
      conditional();
      break;
    case ID:
      assignment();
      break;
    case 13:
      jj_consume_token(13);
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
      jj_consume_token(19);
      booleanExpr();
      jj_consume_token(20);
      block();
      jj_consume_token(27);
      break;
    case 30:
      jj_consume_token(30);
      jj_consume_token(19);
      jj_consume_token(ID);
      jj_consume_token(31);
      ret();
      jj_consume_token(20);
      block();
      jj_consume_token(27);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void booleanExpr() throws ParseException {
    bE1();
    booleanExpr1();
  }

  static final public void booleanExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      bE1();
      booleanExpr1();
      break;
    case 9:
      jj_consume_token(9);
      bE1();
      booleanExpr1();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bE1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      booleanExpr();
      break;
    case 21:
    case 23:
    case INT:
    case ID:
      operand();
      jj_consume_token(3);
      operand();
      break;
      operand();
      jj_consume_token(4);
      operand();
      break;
      operand();
      jj_consume_token(5);
      operand();
      break;
      operand();
      jj_consume_token(6);
      operand();
      break;
      operand();
      jj_consume_token(7);
      operand();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void conditional() throws ParseException {
    jj_consume_token(32);
    jj_consume_token(19);
    booleanExpr();
    jj_consume_token(20);
    block();
    jj_consume_token(27);
    jj_consume_token(13);
    conditional1();
  }

  static final public void conditional1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      conditional();
      break;
      jj_consume_token(33);
      block();
      jj_consume_token(27);
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      jj_consume_token(39);
      expression();
      break;
      jj_consume_token(ID);
      jj_consume_token(40);
      expression();
      break;
      jj_consume_token(ID);
      jj_consume_token(41);
      expression();
      break;
      jj_consume_token(ID);
      jj_consume_token(42);
      expression();
      break;
      jj_consume_token(ID);
      jj_consume_token(43);
      expression();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    expr1();
    expr0();
  }

  static final public void expr0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      expr1();
      expr0();
      break;
    case 17:
      jj_consume_token(17);
      expr1();
      expr0();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      expr2();
      expr1();
      break;
    case 45:
      jj_consume_token(45);
      expr2();
      expr1();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      expr3();
      expr2();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expr3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      expression();
      jj_consume_token(20);
      break;
    case 21:
    case 23:
    case INT:
    case ID:
      operand();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void operand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case 23:
      note();
      break;
    case 21:
      sequence();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void note() throws ParseException {
    jj_consume_token(23);
    note1();
    note();
  }

  static final public void note1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      jj_consume_token(12);
      jj_consume_token(24);
      jj_consume_token(19);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(24);
      jj_consume_token(19);
      jj_consume_token(DEGREE);
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(24);
      jj_consume_token(19);
      jj_consume_token(16);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(24);
      jj_consume_token(19);
      jj_consume_token(17);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(24);
      jj_consume_token(19);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(25);
      jj_consume_token(19);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(25);
      jj_consume_token(19);
      jj_consume_token(16);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(25);
      jj_consume_token(19);
      jj_consume_token(17);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(26);
      jj_consume_token(19);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(26);
      jj_consume_token(19);
      jj_consume_token(16);
      expression();
      jj_consume_token(20);
      note1();
      break;
      jj_consume_token(12);
      jj_consume_token(26);
      jj_consume_token(19);
      jj_consume_token(17);
      expression();
      jj_consume_token(20);
      note1();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ret() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case 21:
      sequence();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sequence() throws ParseException {
    jj_consume_token(21);
    noteList();
    jj_consume_token(22);
  }

  static final public void noteList() throws ParseException {
    note();
    noteList1();
  }

  static final public void noteList1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      noteList();
      break;
    case 14:
      jj_consume_token(14);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void track() throws ParseException {
    jj_consume_token(34);
    jj_consume_token(11);
    ret();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ScalrParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc000,0x6000,0x60006000,0x60000000,0x4300,0xa00400,0x4000,0x0,0x34000,0x4000,0x44000,0xa80000,0xa00000,0x5000,0x200000,0xc000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x21,0x0,0x0,0x30,0x2,0x20,0x0,0x3000,0x0,0x30,0x30,0x0,0x20,0x0,};
   }

  /** Constructor with InputStream. */
  public ScalrParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ScalrParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScalrParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ScalrParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScalrParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ScalrParser(ScalrParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ScalrParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
